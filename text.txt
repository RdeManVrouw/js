#ifndef LIST_H
#define LIST_H

#include <stdlib.h>
#include <stdio.h>
#include <assert.h>

typedef struct listNode * List;

List createList();
void freeList(List li);
void addItem(void *item, List li);

int hasNext(List li);

#endif


















#include <stdio.h>
#include <stdlib.h>
#include "list.h"

struct listNode {
  void *item;
  List next;
};

List createList(){
  List output = malloc(sizeof(struct listNode));
  if (output == NULL){
    stackMemoryError();
  }
  return output;
}
void freeList(List li){
  if (li == NULL) return;
  freeList(li->next);
  free(li);
}
void addItem(void *item, List li){
  if (li != NULL) li->item = item;
}

int hasNext(List li){
  return li->next != NULL;
}

















#ifndef EXPRESSION_H
#define EXPRESSION_H

typedef struct expressionnode ExpressionNode;
typedef ExpressionNode * Node;

int acceptNatural(char *str, int *index);
int acceptZero(char *str, int *index);
int acceptDigit(char *str, int *index);
int acceptInteger(char *str, int *index, Node item);
int acceptFloat(char *str, int *index, Node item);

Node createNode();
void freeNode(Node node);
void addChar(Node node, char c);

#endif


















#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "expression.h"
#include "list.h"
/*
<natural> := '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
<zero> := '0'
<digit> := <zero> | <natural>
<integer> := ('-' | '') (<natural> [ <digit> ]) | <zero>
<float> := <integer> '.' [ <digit> ]
*<number> := <integer> | <float>

<char> := 'a' | 'b' | ... | 'z' | 'A' | 'B' | ... | 'Z'
*<operator> := '+' | '-' | '*' | '/' | '^'

*<comma> := ','
*<equal> := '='
*<variable> := <char> [ <char> ] [ <digit> ]
*<function> := (<variable> | '') '(' <expression> [ <comma> <expression> ] ')'
<term> := ((<number> | '') <variable>) | <function> | <number>
<expression> := <term> [ <operator> <term> ]
<equation> := <expression> <equal> <expression>

<differentiation_command> := <variable> '_' <variable>
<evaluate_command> := 'evaluate ' (<function> | <variable>) [ ' ' <variable> '=' <expression> ]

(* means a number of ' ' can go before)
*/

struct expressionnode {
  float value;
  int type; // operator, variable, integer, function, float
  char *str;
  int str_len;
};

int acceptNatural(char *str, int *index){
  if (str[*index] >= '1' && str[*index] <= '9'){
    *index += 1;
    return 1;
  }
  return 0;
}
int acceptZero(char *str, int *index){
  if (str[*index] == '0'){
    *index += 1;
    return 1;
  }
  return 0;
}
int acceptDigit(char *str, int *index){
  return acceptNatural(str, index) || acceptZero(str, index);
}
int acceptInteger(char *str, int *index, Node item){
  int sign = 1;
  if (str[*index] == '-'){
    *index += 1;
    sign = -1;
  }
  if (acceptNatural(str, index)){
    int sum = str[*index - 1] - '0';
    while (acceptDigit(str, index)) sum = 10 * sum + str[*index - 1] - '0';
    item->value = sign * sum;
    item->type = 2;
    return 1;
  }
  if (acceptZero(str, index)){
    item->value = 0;
    item->type = 2;
    return 1;
  }
  *index -= (sign == -1);
  return 0;
}
int acceptFloat(char *str, int *index, Node item){
  int temp = *index;
  int sign = 1;
  if (str[*index] == '-'){
    sign = -1;
    *index += 1;
  }
  if (acceptInteger(str, index, item) && str[*index] == '.'){
    *index += 1;
    float mult = 0.1;
    while (acceptDigit(str, index)){
      item->value += mult * (str[*index - 1] - '0');
      mult /= 10;
    }
    item->value *= sign;
    item->type = 4;
    return 1;
  }
  *index = temp;
  return 0;
}
int acceptNumber(char *str, int *index, Node item){
  while (str[*index] == ' ') *index += 1;
  return acceptFloat(str, index, item) || acceptInteger(str, index, item);
}
int acceptChar(char *str, int *index){
  if ((str[*index] >= 'a' && str[*index] <= 'z') || (str[*index] >= 'A' && str[*index] <= 'Z')){
    *index += 1;
    return 1;
  }
  return 0;
}
int acceptOperator(char *str, int *index, Node item, int *priority){
  int temp = *index;
  while (str[*index] == ' ') *index += 1;
  int p = 0;
  if (str[*index] == '+' || str[*index] == '-') p = 1;
  if (str[*index] == '*' || str[*index] == '/') p = 2;
  if (str[*index] == '^') p = 3;
  if (p){
    addChar(item, str[*index]);
    *index += 1;
    *priority = p;
    item->type = 0;
    return 1;
  }
  *index = temp;
  return 0;
}

Node createNode(){
  Node node = (Node)malloc(sizeof(ExpressionNode));
  node->str_len = 0;
  return node;
}
void freeNode(Node node){
  free(node->str);
  free(node);
}
void addChar(Node node, char c){
  strncat(node->str, &c, 1);
  node->str_len++;
}

int main(){
  char *str = "+";
  Node n = createNode();
  int index = 0;
  int priority;
  printf("%i\n", acceptOperator(str, &index, n, &priority));
  printf("%i\n", n->str_len);
  free(str);
  freeNode(n);
  return 0;
}
